/*
  This file contains the
*/

var options = {
  // The address where Chatty should listen on.
  listenAddress: 'localhost',
  // The port where Chatty should listen on
  listenPort: 3000,
  // The enableSSL var indicates if SSL should be used to encrypt the
  // data stream between client and server.
  enableSSL: true,
  /*
    For SSL to work you will need to generate a Key and Certificate file.

    You can generate these files by using the openSSL program. openSSL is installed by default
      on Mac OS X and a lot of modern Linux distros. Windows users can use openSSL by installing Cygwin (cygwin.com)
      or by downloading and compiling the openSSL source code from openssl.org.

    You can generate a self-signed certificate and key with openSSL by running the following in a Bash shell:
      # trow away the first 10 random generated bytes of urandom.
      head /dev/urandom > /dev/null
      # Generate a 1024 bits rsa key. You can replace 1024 by 2048 or 4096 if you want a stronger key.
      openssl genrsa -rand /dev/urandom -out ChattyServer.key 1024
      # Generate a certificate which is valid for 10 years.
      openssl req -new -x509 -days 3652 -key ChattyServer.key -out ChattyServer.crt

    Source: https://uit.stanford.edu/service/ssl/selfsigned

    Alternatively you can use a service to generate the key and cert.
    The website 'http://www.selfsignedcertificate.com/' can generate a key and
    cert for you.

    It is not advised to use a self-signed certificate in a production environment.
  */
  SSLKeyPath: './ChattyServer.key',
  SSLCrtPath: './ChattyServer.crt',
  // Name of the messages database which is used to store undelivered messages
  // A new database will be created when the file does not exists.
  msgDBName: 'messages.db'
}

module.exports = options
